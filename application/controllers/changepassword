public function changePassword()
	{
		$data['title'] = 'Change Password';
		$data['users'] = $this->db->get_where('users',['email' => $this->session->userdata('email')])->row_array();

		$this->form_validation->set_rules('current_password','Current Password','required|trim');
		$this->form_validation->set_rules('new_password1','New Password','required|trim|min_length[3]|matches[new_password2]');
		$this->form_validation->set_rules('new_password2','Confirm New Password','required|trim|min_length[3]|matches[new_password1]');
		
		if ($this->form_validation->run() == false) {
			$this->load->view('templates/header',$data);
			$this->load->view('templates/sidebar',$data);
			$this->load->view('templates/topbar',$data);
			$this->load->view('user/changepassword',$data);
			$this->load->view('templates/footer');

		} else {
			$current_password = $this->input->post('current_password');
			$new_password = $this->input->post('new_password1');
			if (!password_verify($current_password, $data['users']['password'])) {
				$this->session->set_flashdata('message','<div class="alert alert-danger" role="alert">Wrong Current Password!</div>');
				redirect('user/changepassword');
			} else {
				if ($current_password == $new_password) {
				$this->session->set_flashdata('message','<div class="alert alert-danger" role="alert">New Password Cannot be the same as current password!</div>');
				redirect('user/changepassword');
			} else {
				// Password sudah ok
				$password_hash = password_hash($new_password, PASSWORD_DEFAULT);

				$this->db->set('password',$password_hash);
				$this->db->where('email',$this->session->userdata('email'));
				$this->db->update('users');

				$this->session->set_flashdata('message','<div class="alert alert-succes" role="alert">Password Changed!</div>');
				redirect('user/changepassword');
			}

		}
		

	}

========================================================================
public function registration()
	{
		if ($this->session->userdata('email')) {
			redirect('user');
		}
		

		$this->form_validation->set_rules('name','Name','required|trim');
		$this->form_validation->set_rules('email','Email','required|trim|valid_email|is_unique[users.email]',['is_unique' =>'This email has already registered!']);
		$this->form_validation->set_rules('password1','Password','required|trim|min_length[3]|matches[password2]',[
			'matches' => 'Password dont match!',
			'min_length' => 'Password too short'

		]);
		$this->form_validation->set_rules('password2','Password','required|trim|matches[password1]');
		if ($this->form_validation->run() == false) {
			$data['title'] = 'WPU User Registration';
			$this->load->view('templates/auth_header',$data);
			$this->load->view('auth/registration');
			$this->load->view('templates/auth_footer');
			} else {
				$data = [
					'name' => htmlspecialchars($this->input->post('name',true)),
					'email' => htmlspecialchars($this->input->post('email',true)),
					'file' => 'default.jpg',
					'password' => password_hash($this->input->post('password1'),PASSWORD_DEFAULT),
					'role_id' => 2,
					'is_active' => 1,
					'date_created' => time()
				];

				$this->db->insert('users',$data);
				$this->session->set_flashdata('message','<div class="alert alert-success" role="alert">
					Congratulation! your account has been created. Please Login</div>');
				redirect('auth/index');
			}
		
	}


	public function logout()
	{
		$this->session->unset_userdata('email');
		$this->session->unset_userdata('role_id');

		$this->session->set_flashdata('message','<div class="alert alert-success" role="alert">
					You have been logout!</div>');
				redirect('auth/index');
	}


	public function blocked()
	{
		$this->load->view('auth/blocked');
	}